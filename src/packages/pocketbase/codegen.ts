import { CodeWriter } from "../codewriter";
import type { PluginOptions } from "./types";
import { type CollectionField, type CollectionModel } from "pocketbase";


const getFieldType = (field: any) => {
  switch (field.type) {
    case "text":
    case "email":
    case "url":
    case "select":
    case "file":
    case "editor":
    case "autodate":
      return "string";
    case "relation":
      return "Id";
    case "number":
      return "number";
    case "bool":
      return "boolean";
    case "date":
      return "string"; // or Date, depending on your preference
    case "json":
      return "any"; // or a more specific type if you know the structure
    case "geopoint":
      return "geoPoint";
    default:
      return field.type; // fallback to the field type if it's custom
  }
};

const getName = (collection: CollectionModel, options: PluginOptions) => {
  return `${options.collectionNameResolver(collection)}${options.nameSuffix}`
}
const generateType = (
  options: PluginOptions,
  collection: CollectionModel,
  indents: number
) => {
  var w = new CodeWriter();
  w.indents = indents;
  w.writeLine("// " + collection.name, false);
  w.writeOpenBracket(`interface ${getName(collection, options)}${options.useBaseModel ? ' extends BaseModel' : '' }`    );

  w.writeLines(collection.fields.filter(f => options.fieldFilter(f, options)), (field: CollectionField) => {
    const fieldType = getFieldType(field);
    const optionalFlag = field.required ? "" : "?";
    return `${options.fieldNameResolver(field)}${optionalFlag}: ${fieldType};`;
  });

  w.writeCloseBracket();

  return w.toString();
};

export function generateDTS(options: PluginOptions,collections: CollectionModel[]) {

  const w = new CodeWriter();
  w.writeLine(`// Generated by vite-plugin-pocketbase`);
  w.writeBlankLine();
  w.writeLine(`import PocketBase, { RecordService, BaseModel } from 'pocketbase';`);
  w.writeBlankLine();
  w.writeOpenBracket('declare global');
  w.writeLine("type Id = string");
  w.writeLine("type Uri = string");
  w.writeLine("type GeoPoint = { lat: number; lon: number };");
  w.writeBlankLine();

  w.each(collections.filter( c => options.collectionFilter(c, options)), (coll:CollectionModel) => {
    w.writeLine(generateType(options, coll, w.indents));
  });

  w.writeOpenBracket("interface TypedPocketBase extends PocketBase");
  w.each(collections.filter( c => options.collectionFilter(c, options)), (coll:CollectionModel) => {
    w.writeLine(`collection(idOrName: "${coll.name}"): RecordService<${getName(coll, options)}>;`);
  });
  w.writeCloseBracket();
  w.writeCloseBracket();
  w.writeLine(`export {}`);

  return w.toString().trim();

}
